import { ReadonlySignal, Signal } from "@preact/signals-core";
interface ShowProps<T = boolean> {
    when: Signal<T> | ReadonlySignal<T>;
    fallback?: JSX.Element;
    children: JSX.Element | ((value: NonNullable<T>) => JSX.Element);
}
export declare function Show<T = boolean>(props: ShowProps<T>): JSX.Element | null;
interface ForProps<T> {
    each: Signal<Array<T>> | ReadonlySignal<Array<T>> | (() => Signal<Array<T>> | ReadonlySignal<Array<T>>);
    fallback?: JSX.Element;
    children: (value: T, index: number) => JSX.Element;
}
export declare function For<T>(props: ForProps<T>): JSX.Element | null;
export declare function useLiveSignal<T>(value: Signal<T> | ReadonlySignal<T>): Signal<Signal<T> | ReadonlySignal<T>>;
export declare function useSignalRef<T>(value: T): Signal<T> & {
    current: T;
};
export {};

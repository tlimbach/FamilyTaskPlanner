{
  "version": 3,
  "sources": ["src/Grid.tsx", "src/generated/Grid.ts"],
  "sourcesContent": ["export * from \"@vaadin/grid/vaadin-grid.js\";\nimport {\n  type ComponentType,\n  type ForwardedRef,\n  forwardRef,\n  type ReactElement,\n  type RefAttributes,\n  useLayoutEffect,\n  useRef,\n} from 'react';\nimport {\n  Grid as _Grid,\n  type GridDefaultItem,\n  type GridElement,\n  type GridProps as _GridProps,\n} from './generated/Grid.js';\nimport type { GridRowDetailsReactRendererProps } from './renderers/grid.js';\nimport { useModelRenderer } from './renderers/useModelRenderer.js';\nimport useMergedRefs from './utils/useMergedRefs.js';\n\nexport * from './generated/Grid.js';\n\nexport type GridProps<TItem> = Partial<Omit<_GridProps<TItem>, 'rowDetailsRenderer'>> &\n  Readonly<{\n    rowDetailsRenderer?: ComponentType<GridRowDetailsReactRendererProps<TItem>> | null;\n  }>;\n\nfunction Grid<TItem = GridDefaultItem>(\n  props: GridProps<TItem>,\n  ref: ForwardedRef<GridElement<TItem>>,\n): ReactElement | null {\n  const [portals, rowDetailsRenderer] = useModelRenderer(props.rowDetailsRenderer, {\n    renderMode: 'microtask',\n  });\n\n  const innerRef = useRef<GridElement>(null);\n  const finalRef = useMergedRefs(innerRef, ref);\n\n  useLayoutEffect(() => {\n    innerRef.current!.recalculateColumnWidths = function (...args) {\n      // Wait for column content to finish rendering before recalculating widths.\n      queueMicrotask(() => {\n        Object.getPrototypeOf(this).recalculateColumnWidths.call(this, ...args);\n      });\n    };\n  }, []);\n\n  return (\n    <_Grid<TItem> {...props} ref={finalRef} rowDetailsRenderer={rowDetailsRenderer}>\n      {props.children}\n      {portals}\n    </_Grid>\n  );\n}\n\nconst ForwardedGrid = forwardRef(Grid) as <TItem = GridDefaultItem>(\n  props: GridProps<TItem> & RefAttributes<GridElement<TItem>>,\n) => ReactElement | null;\n\nexport { ForwardedGrid as Grid };\n", "import type { EventName } from \"@lit/react\";\nimport { Grid as GridElement, type GridEventMap as _GridEventMap, } from \"@vaadin/grid/vaadin-grid.js\";\nimport * as React from \"react\";\nimport { createComponent, type WebComponentProps } from \"../utils/createComponent.js\";\nexport { GridElement, };\nexport type GridEventMap<T1> = Readonly<{\n    onActiveItemChanged: EventName<_GridEventMap<T1>[\"active-item-changed\"]>;\n    onCellActivate: EventName<_GridEventMap<T1>[\"cell-activate\"]>;\n    onColumnResize: EventName<_GridEventMap<T1>[\"column-resize\"]>;\n    onExpandedItemsChanged: EventName<_GridEventMap<T1>[\"expanded-items-changed\"]>;\n    onLoadingChanged: EventName<_GridEventMap<T1>[\"loading-changed\"]>;\n    onItemToggle: EventName<_GridEventMap<T1>[\"item-toggle\"]>;\n    onSelectedItemsChanged: EventName<_GridEventMap<T1>[\"selected-items-changed\"]>;\n    onCellFocus: EventName<_GridEventMap<T1>[\"cell-focus\"]>;\n    onColumnReorder: EventName<_GridEventMap<T1>[\"column-reorder\"]>;\n    onGridDragend: EventName<_GridEventMap<T1>[\"grid-dragend\"]>;\n    onGridDragstart: EventName<_GridEventMap<T1>[\"grid-dragstart\"]>;\n    onGridDrop: EventName<_GridEventMap<T1>[\"grid-drop\"]>;\n    onSizeChanged: EventName<CustomEvent<unknown>>;\n    onDataProviderChanged: EventName<CustomEvent<unknown>>;\n}>;\nconst events = { onActiveItemChanged: \"active-item-changed\", onCellActivate: \"cell-activate\", onColumnResize: \"column-resize\", onExpandedItemsChanged: \"expanded-items-changed\", onLoadingChanged: \"loading-changed\", onItemToggle: \"item-toggle\", onSelectedItemsChanged: \"selected-items-changed\", onCellFocus: \"cell-focus\", onColumnReorder: \"column-reorder\", onGridDragend: \"grid-dragend\", onGridDragstart: \"grid-dragstart\", onGridDrop: \"grid-drop\", onSizeChanged: \"size-changed\", onDataProviderChanged: \"data-provider-changed\" } as GridEventMap<any>;\nexport type GridProps<T1> = WebComponentProps<GridElement<T1>, GridEventMap<T1>>;\nexport const Grid = createComponent({\n    elementClass: GridElement, events, react: React, tagName: \"vaadin-grid\"\n}) as <T1>(props: GridProps<T1> & React.RefAttributes<GridElement<T1>>) => React.ReactElement | null;\n"],
  "mappings": "AAAA,WAAc,8BACd,OAGE,cAAAA,EAGA,mBAAAC,EACA,UAAAC,MACK,QCRP,OAAS,QAAQC,MAAwD,8BACzE,UAAYC,MAAW,QACvB,OAAS,mBAAAC,MAA+C,6BAkBxD,IAAMC,EAAS,CAAE,oBAAqB,sBAAuB,eAAgB,gBAAiB,eAAgB,gBAAiB,uBAAwB,yBAA0B,iBAAkB,kBAAmB,aAAc,cAAe,uBAAwB,yBAA0B,YAAa,aAAc,gBAAiB,iBAAkB,cAAe,eAAgB,gBAAiB,iBAAkB,WAAY,YAAa,cAAe,eAAgB,sBAAuB,uBAAwB,EAE/fC,EAAOC,EAAgB,CAChC,aAAcC,EAAa,OAAAH,EAAQ,MAAOI,EAAO,QAAS,aAC9D,CAAC,EDRD,OAAS,oBAAAC,MAAwB,kCACjC,OAAOC,MAAmB,2BA8BtB,eAAAC,MAAA,oBArBJ,SAASC,EACPC,EACAC,EACqB,CACrB,GAAM,CAACC,EAASC,CAAkB,EAAIP,EAAiBI,EAAM,mBAAoB,CAC/E,WAAY,WACd,CAAC,EAEKI,EAAWC,EAAoB,IAAI,EACnCC,EAAWT,EAAcO,EAAUH,CAAG,EAE5C,OAAAM,EAAgB,IAAM,CACpBH,EAAS,QAAS,wBAA0B,YAAaI,EAAM,CAE7D,eAAe,IAAM,CACnB,OAAO,eAAe,IAAI,EAAE,wBAAwB,KAAK,KAAM,GAAGA,CAAI,CACxE,CAAC,CACH,CACF,EAAG,CAAC,CAAC,EAGHV,EAACC,EAAA,CAAc,GAAGC,EAAO,IAAKM,EAAU,mBAAoBH,EACzD,UAAAH,EAAM,SACNE,GACH,CAEJ,CAEA,IAAMO,EAAgBC,EAAWX,CAAI",
  "names": ["forwardRef", "useLayoutEffect", "useRef", "GridElement", "React", "createComponent", "events", "Grid", "createComponent", "GridElement", "React", "useModelRenderer", "useMergedRefs", "jsxs", "Grid", "props", "ref", "portals", "rowDetailsRenderer", "innerRef", "useRef", "finalRef", "useLayoutEffect", "args", "ForwardedGrid", "forwardRef"]
}

{
  "version": 3,
  "sources": ["src/MasterDetailLayout.tsx", "src/generated/MasterDetailLayout.ts"],
  "sourcesContent": ["export * from \"@vaadin/master-detail-layout/vaadin-master-detail-layout.js\";\nimport {\n  MasterDetailLayout as _MasterDetailLayout,\n  MasterDetailLayoutElement,\n} from './generated/MasterDetailLayout.js';\nimport React, { useEffect, useLayoutEffect, useRef, useState } from 'react';\n\nexport * from './generated/MasterDetailLayout.js';\n\ntype MasterProps = React.PropsWithChildren<{}>;\ntype DetailProps = React.PropsWithChildren<{}>;\n\ntype MasterDetailLayoutElementWithInternalAPI = MasterDetailLayoutElement & {\n  _startTransition: (transitionType: 'add' | 'remove' | 'replace', callback: () => void) => void;\n  _finishTransition: () => Promise<void>;\n};\n\nfunction Master({ children }: MasterProps) {\n  return children;\n}\n\n/**\n * Compares two sets of React children to detect meaningful changes, ignoring text nodes.\n * Compares by component type and key.\n *\n * @param prevChildren Previous children\n * @param nextChildren Current children\n * @returns True if the non-text children are meaningfully different, false otherwise\n */\nfunction areChildrenDifferent(prevChildren: React.ReactNode, nextChildren: React.ReactNode): boolean {\n  // Convert to arrays and filter out text nodes\n  const prevArray = React.Children.toArray(prevChildren).filter((child) => React.isValidElement(child));\n  const nextArray = React.Children.toArray(nextChildren).filter((child) => React.isValidElement(child));\n\n  // If lengths are different, children have changed\n  if (prevArray.length !== nextArray.length) {\n    return true;\n  }\n\n  // Compare each element by type and key\n  for (let i = 0; i < prevArray.length; i++) {\n    const prevChild = prevArray[i] as React.ReactElement;\n    const nextChild = nextArray[i] as React.ReactElement;\n\n    // Compare by type\n    if (prevChild.type !== nextChild.type) {\n      return true;\n    }\n\n    // Compare by key (React.Children.toArray adds keys if missing)\n    if (prevChild.key !== nextChild.key) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction Detail({ children }: DetailProps) {\n  const currentDetailsRef = useRef<HTMLDivElement>(null);\n  const currentDetailsKey = useRef<number>(0);\n  const nextDetailsRef = useRef<HTMLDivElement>(null);\n  const nextDetailsKey = currentDetailsKey.current + 1;\n  const [state, setState] = useState('idle');\n  const [currentChildren, setCurrentChildren] = useState(children);\n\n  useLayoutEffect(() => {\n    const layout = currentDetailsRef.current?.closest(\n      'vaadin-master-detail-layout',\n    ) as MasterDetailLayoutElementWithInternalAPI;\n    if (!layout) {\n      return;\n    }\n\n    if (state === 'idle') {\n      // No transition in progress\n      // Just update slot name\n      const hasChildren = currentDetailsRef.current!.childElementCount > 0;\n      currentDetailsRef.current!.setAttribute('slot', hasChildren ? 'detail' : 'detail-hidden');\n    } else if (state === 'starting') {\n      // Transition is starting and old and (invisible) new details are rendered\n      // Determine the transition type based on old and new detail contents\n      const hasCurrentDetails = currentDetailsRef.current!.childElementCount > 0;\n      const hasNextDetails = nextDetailsRef.current!.childElementCount > 0;\n      const transitionType = hasCurrentDetails && hasNextDetails ? 'replace' : hasCurrentDetails ? 'remove' : 'add';\n      // Start transition to capture old DOM state\n      layout._startTransition(transitionType, () => {\n        // Once old DOM state is captured, render with new details only\n        setState('ready');\n        setCurrentChildren(children);\n        currentDetailsKey.current = nextDetailsKey;\n      });\n    } else if (state === 'ready') {\n      // Transition is ready and new details are rendered\n      // Update slot name to either show or hide the new details\n      const hasChildren = currentDetailsRef.current!.childElementCount > 0;\n      currentDetailsRef.current!.setAttribute('slot', hasChildren ? 'detail' : 'detail-hidden');\n      // Finish transition to animate to new DOM state\n      layout._finishTransition().then(() => {\n        // Transition is finished, reset state\n        setState('idle');\n      });\n    }\n  }, [state, currentChildren]);\n\n  useEffect(() => {\n    if (state !== 'idle') {\n      return;\n    }\n    if (areChildrenDifferent(currentChildren, children)) {\n      setState('starting');\n    } else {\n      setCurrentChildren(children);\n    }\n  }, [state, children]);\n\n  return (\n    <>\n      <div ref={currentDetailsRef} key={currentDetailsKey.current} style={{ display: 'contents' }}>\n        {currentChildren}\n      </div>\n      {state === 'starting' && (\n        <div ref={nextDetailsRef} key={nextDetailsKey} style={{ display: 'none' }}>\n          {children}\n        </div>\n      )}\n    </>\n  );\n}\n\nfunction validateChildren(children: React.ReactNode) {\n  React.Children.forEach(children, (child) => {\n    // Ignore non-React elements\n    // We especially want to ignore text nodes to allow for whitespace resulting from formatting\n    if (React.isValidElement(child) && child.type !== Master && child.type !== Detail) {\n      throw new Error(\n        'Invalid child in MasterDetailLayout. Only <MasterDetailLayout.Master> and <MasterDetailLayout.Detail> components are allowed. Check the component docs for proper usage.',\n      );\n    }\n  });\n}\n\nconst MasterDetailLayoutWithValidation: React.FC<React.ComponentProps<typeof _MasterDetailLayout>> = (props) => {\n  validateChildren(props.children);\n\n  return <_MasterDetailLayout {...props} />;\n};\n\n/**\n * `MasterDetailLayout` is a React component for building UIs with a master\n * (or primary) area and a detail (or secondary) area that is displayed next to, or\n * overlaid on top of, the master area, depending on configuration and viewport size.\n *\n * Content for each area should be wrapped into to the respective\n * `MasterDetailLayout.Master` and `MasterDetailLayout.Detail` wrapper components.\n * Using any other component as a child will throw an error. To ensure that view\n * transitions are run properly, details content should be rendered conditionally\n * into the `MasterDetailLayout.Detail` component.\n *\n * @example\n * ```tsx\n * const selectedProduct = useSignal<Product | null>(null);\n *\n * <MasterDetailLayout>\n *   <MasterDetailLayout.Master>\n *     <ProductList onSelect={(product) => { selectedProduct.value = product }} />\n *   </MasterDetailLayout.Master>\n *   <MasterDetailLayout.Detail>\n *     { selectedProduct.value && <ProductDetail product={selectedProduct.value} /> }\n *   </MasterDetailLayout.Detail>\n * </MasterDetailLayout>\n * ```\n */\nconst MasterDetailLayout = MasterDetailLayoutWithValidation as typeof MasterDetailLayoutWithValidation & {\n  Master: React.FC<MasterProps>;\n  Detail: React.FC<DetailProps>;\n};\n\nMasterDetailLayout.Master = Master;\nMasterDetailLayout.Detail = Detail;\n\nexport { MasterDetailLayout };\n", "import type { EventName } from \"@lit/react\";\nimport { MasterDetailLayout as MasterDetailLayoutElement, type MasterDetailLayoutEventMap as _MasterDetailLayoutEventMap, } from \"@vaadin/master-detail-layout/vaadin-master-detail-layout.js\";\nimport * as React from \"react\";\nimport { createComponent, type WebComponentProps } from \"../utils/createComponent.js\";\nexport { MasterDetailLayoutElement, };\nexport type MasterDetailLayoutEventMap = Readonly<{\n    onBackdropClick: EventName<_MasterDetailLayoutEventMap[\"backdrop-click\"]>;\n    onDetailEscapePress: EventName<_MasterDetailLayoutEventMap[\"detail-escape-press\"]>;\n}>;\nconst events = { onBackdropClick: \"backdrop-click\", onDetailEscapePress: \"detail-escape-press\" } as MasterDetailLayoutEventMap;\nexport type MasterDetailLayoutProps = WebComponentProps<MasterDetailLayoutElement, MasterDetailLayoutEventMap>;\nexport const MasterDetailLayout = createComponent({\n    elementClass: MasterDetailLayoutElement, events, react: React, tagName: \"vaadin-master-detail-layout\"\n});\n"],
  "mappings": "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",
  "names": ["MasterDetailLayoutElement", "React", "createComponent", "events", "MasterDetailLayout", "createComponent", "MasterDetailLayoutElement", "React", "React", "useEffect", "useLayoutEffect", "useRef", "useState", "Fragment", "jsx", "jsxs", "Master", "children", "areChildrenDifferent", "prevChildren", "nextChildren", "prevArray", "child", "nextArray", "i", "prevChild", "nextChild", "Detail", "currentDetailsRef", "currentDetailsKey", "nextDetailsRef", "nextDetailsKey", "state", "setState", "currentChildren", "setCurrentChildren", "layout", "hasChildren", "hasCurrentDetails", "hasNextDetails", "transitionType", "validateChildren", "MasterDetailLayoutWithValidation", "props", "MasterDetailLayout"]
}
